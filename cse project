#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

pthread_mutex_t mutex = PTHREAD_MUTEX_INITIALIZER; // Mutex to synchronize access to shared resources
pthread_cond_t cond_student = PTHREAD_COND_INITIALIZER; // Condition variable for students
pthread_cond_t cond_teacher = PTHREAD_COND_INITIALIZER; // Condition variable for teacher

int pen = 0; // Shared resource - pen
int paper = 0; // Shared resource - paper
int question_paper = 0; // Shared resource - question paper
int completed_assignments = 0; // Counter for completed assignments

void *teacher(void *arg) {
    while (completed_assignments < 3) { // Loop until all assignments are completed
        pthread_mutex_lock(&mutex);
        while (pen == 0 || paper == 0 || question_paper == 0) { // Wait until all resources are available
            pthread_cond_wait(&cond_teacher, &mutex);
        }
        printf("Teacher places two resources on the table.\n");
        pen = 0;
        paper = 0;
        question_paper = 0;
        pthread_cond_broadcast(&cond_student); // Signal students that resources are available
        pthread_mutex_unlock(&mutex);
    }
    pthread_exit(NULL);
}

void *student(void *arg) {
    int *student_id = (int *)arg;
    int has_pen = 0;
    int has_paper = 0;
    int has_question_paper = 0;
    
    while (completed_assignments < 3) { // Loop until all assignments are completed
        pthread_mutex_lock(&mutex);
        
        while ((has_pen == 0 && pen == 0) || (has_paper == 0 && paper == 0) || (has_question_paper == 0 && question_paper == 0)) {
            // Wait until the required resource is available
            pthread_cond_wait(&cond_student, &mutex);
        }
        
        if (pen == 1 && paper == 0 && question_paper == 0) {
            printf("Student %d has pen.\n", *student_id);
            paper = 1;
            question_paper = 1;
            has_paper = 1;
            has_question_paper = 1;
        } else if (pen == 0 && paper == 1 && question_paper == 0) {
            printf("Student %d has paper.\n", *student_id);
            pen = 1;
            question_paper = 1;
            has_pen = 1;
            has_question_paper = 1;
        } else if (pen == 0 && paper == 0 && question_paper == 1) {
            printf("Student %d has question paper.\n", *student_id);
            pen = 1;
            paper = 1;
            has_pen = 1;
            has_paper = 1;
        }
        
        completed_assignments++;
        printf("Student %d completes assignment %d.\n", *student_id, completed_assignments);
        pthread_cond_broadcast(&cond_teacher); // Signal teacher that resources are available
        pthread_mutex_unlock(&mutex);
    }
    pthread_exit(NULL);
}

int main() {
    pthread_t teacher_thread, student_thread1, student_thread2, student_thread3;
    int student_id1 = 1, student_id2 = 2, student_id3 = 3;
    
    // Create teacher thread
    pthread_create(&teacher_thread, NULL, teacher, NULL);
    
    // Create student threads
    pthread_create(&student_thread1, NULL, student,
